import sqlite3
import sys
sys.path.append('..')
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, WebAppInfo, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import asyncio
from filters import is_subscribed
from filters.is_private import IsChatPrivate
from keyboards import make_keyboard
from aiogram.fsm.context import FSMContext
from data.config import WEB_APP_URL, BOT_TOKEN, GROUP_CHAT_ID
from loader import user_repository

router = Router()

state_language = "language"

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()


async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
        return member.status not in ("left", "kicked")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


@router.callback_query(F.data == "open_web_app")
async def process_check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    language = await user_repository.get_language_or_none(user_id)
    if language is None:
        language = callback_query.from_user.language_code

    if is_subscribed:
        texts = {
            "ru": {
                "subscription_confirmed": "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...",
                "open_web_app": "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
            },
            "en": {
                "subscription_confirmed": "Subscription confirmed. Opening the mini-app...",
                "open_web_app": "Click the button to open the mini-app:"
            }
        }

        await callback_query.answer(texts[language]["subscription_confirmed"])
        webapp_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEB_APP_URL))]
            ]
        )
        message = await bot.send_message(user_id, texts[language]["open_web_app"], reply_markup=webapp_keyboard)

        await asyncio.sleep(15)
        await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    else:
        texts = {
            "ru": {
                "not_subscribed": "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
                "please_subscribe": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.",
                "subscribe_button": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                "check_subscription": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
            },
            "en": {
                "not_subscribed": "You are not subscribed to our channel.",
                "please_subscribe": "Please subscribe to our channel to access the mini-app.",
                "subscribe_button": "Subscribe to channel",
                "check_subscription": "Check subscription"
            }
        }

        channel_info = await bot.get_chat(GROUP_CHAT_ID)
        channel_username = channel_info.username or f"https://t.me/c/{str(GROUP_CHAT_ID)[4:]}"
        await callback_query.answer(texts[language]["not_subscribed"], show_alert=True)
        subscribe_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=texts[language]["subscribe_button"],
                                      url=f"https://t.me/{channel_username}")],
                [InlineKeyboardButton(text=texts[language]["check_subscription"], callback_data="check_subscription")]
            ]
        )
        await bot.send_message(user_id, texts[language]["please_subscribe"], reply_markup=subscribe_keyboard)


@router.callback_query(F.data == "registration_replenishment")
async def logic_of_reg(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≥—Ä—É–ø–ø—É
    if not await is_subscribed.check(user_id):
        language = await user_repository.get_language_or_none(user_id)
        if language is None:
            language = callback_query.from_user.language_code

        text = {
            "ru": "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏ - üí∏üí∏–í–°–¢–£–ü–ò–¢–¨ –í –ì–†–£–ü–ü–£üí∏üí∏",
            "en": "To continue, click - üí∏üí∏JOIN THE GROUPüí∏üí∏"
        }

        await callback_query.message.answer(
            text.get(language, text["en"]),
            reply_markup=make_keyboard.get_inline_keyboard_markup_for_subscription(language)
        )
        return

    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = await user_repository.get_language_or_none(user_id)
    if language is None:
        language = callback_query.from_user.language_code

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–Ω–µ—Å–µ–Ω –ª–∏ –¥–µ–ø–æ–∑–∏—Ç
    cursor.execute("SELECT deposit FROM UsersPostback WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()

    if user and float(user[0]) > 0:
        # –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –≤–Ω–µ—Å–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await start_app_if_deposited(callback_query, language)
    else:
        referral_link = f"https://1wfdnu.life/casino/list?open=register&p=j9ks&sub1={user_id}"

        # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        text = {
            "ru": """üëã<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: 

1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - –µ—Å–ª–∏ —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –µ–≥–æ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π. 
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ <b>VR97</b> –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à <b>–ò–ò</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. 
3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚Äú–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚Äù</b>. 
4. –ï—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ —à–∞–≥–∏, –Ω–∞—à –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –∏–º —Å–∏–≥–Ω–∞–ª—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏. 

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!""",
            "en": """üëã<b>Hello!</b>

To apply the effectiveness of using this bot, you need to adjust the following steps: 

1. Register a new account - if you already have an account, please leave it and register a new account. 
2. Use the <b>VR97</b> promotional code when registering a new account. This is important, since our <b>AI</b> only works with new accounts. 
3. After registration, click on the <b>"Check Registration"</b> button. 
4. If you do not complete these steps, our bot will not be able to add your account to its data resources, and the signals it provides may not be captured. 

Thank you for your understanding!"""
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        builder = InlineKeyboardBuilder()
        builder.button(text="üì≤–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø" if language == "ru" else "üì≤REGISTER", url=referral_link)
        builder.button(text="üîç–ü–†–û–í–ï–†–ò–¢–¨ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ" if language == "ru" else "üîçCHECK REGISTRATION",
                       callback_data="check_registration")
        builder.adjust(1, 1)

        await callback_query.message.answer(text[language], reply_markup=builder.as_markup(), parse_mode='HTML')


async def start_app_if_deposited(callback_query: types.CallbackQuery, language: str):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≥—Ä—É–ø–ø—É
    if not await is_subscribed.check(user_id):
        text = {
            "ru": "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏ üí∏üí∏–í–°–¢–£–ü–ò–¢–¨ –í –ì–†–£–ü–ü–£üí∏üí∏",
            "en": "To continue, click - üí∏üí∏JOIN THE GROUPüí∏üí∏"
        }

        await callback_query.message.answer(
            text.get(language, text["en"]),
            reply_markup=make_keyboard.get_inline_keyboard_markup_for_subscription(language)
        )
        return

    text = {
        "ru_start_app": "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
        "en_start_app": "Now you can start the application by clicking on the Get a signal button in the main menu!"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await callback_query.message.answer(text[f"{language}_start_app"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await handle_check_subscription(callback_query)


@router.callback_query(F.data == "check_registration")
async def callback_query(call: CallbackQuery):
    user_id = call.from_user.id
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = await user_repository.get_language_or_none(user_id)
    if language is None:
        language = call.from_user.language_code

    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    text = {
        "ru_registered": "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "en_registered": "You are registered. Please select an action:",
        "ru_not_registered": "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        "en_not_registered": "You are not registered."
    }

    if call.data == "check_registration":
        cursor.execute("SELECT * FROM UsersPostback WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            referral_link = f"https://1wfdnu.life/casino/list?open=register&p=j9ks&sub1={user_id}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–Ω–µ—Å–µ–Ω –ª–∏ –¥–µ–ø–æ–∑–∏—Ç
            cursor.execute("SELECT deposit FROM UsersPostback WHERE telegram_id = ?", (user_id,))
            deposit_info = cursor.fetchone()

            if deposit_info and float(deposit_info[0]) > 0:
                await start_app_if_deposited(call, language)
            else:
                builder = InlineKeyboardBuilder()
                builder.button(text="üí∞–ü–û–ü–û–õ–ù–ò–¢–¨ –ë–ê–õ–ê–ù–°" if language == "ru" else "üîçTOP-UP", url=referral_link)
                builder.button(text="üîç–ü–†–û–í–ï–†–ò–¢–¨ –ü–û–ü–û–õ–ù–ï–ù–ò–ï" if language == "ru" else "üîçCHECK REPLACEMENT",
                               callback_data="check_deposit")
                builder.adjust(1, 1)

                await call.message.answer(text[f"{language}_registered"], reply_markup=builder.as_markup())

        else:
            await call.answer(text[f"{language}_not_registered"], show_alert=True)


@router.callback_query(F.data == "check_deposit")
async def callback_query(call: CallbackQuery):
    user_id = call.from_user.id
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = await user_repository.get_language_or_none(user_id)
    if language is None:
        language = call.from_user.language_code

    # –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    text = {
        "ru_no_deposit": "–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        "en_no_deposit": "Deposit not found.",
        "ru_start_app": "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!",
        "en_start_app": "Now you can start the application by clicking on the Get a signal button in the main menu!"
    }

    if call.data == "check_deposit":
        cursor.execute("SELECT deposit FROM UsersPostback WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()

        if user and float(user[0]) > 0:
            # –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
            await handle_check_subscription(call)
        else:
            await call.answer(text[f"{language}_no_deposit"], show_alert=True)


@router.callback_query(F.data == "—Åhange_language")
async def set_language(callback_query: types.CallbackQuery, state: FSMContext):
    text = {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Select language:"
    }

    language = await user_repository.get_language_or_none(callback_query.message.from_user.id)
    if language is None:
        language = callback_query.message.from_user.language_code

    await callback_query.message.edit_text(
        text.get(language, text["en"]),
        reply_markup=make_keyboard.get_languages_inline_keyboard_markup())
    await state.set_state(state_language)


@router.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    language = await user_repository.get_language_or_none(user_id)
    if language is None:
        language = callback_query.from_user.language_code
    if await is_subscribed.check(user_id):
        text = {
            "ru": "üè°–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            "en": "üè°Main menu"
        }

        await callback_query.message.edit_text(
            text.get(language, text["en"]),
            reply_markup=await make_keyboard.get_menu_inline_keyboard_markup(user_id, language))
    else:
        text = {
            "ru": "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏ - üí∏üí∏–í–°–¢–£–ü–ò–¢–¨ –í –ì–†–£–ü–ü–£üí∏üí∏",
            "en": "To continue, click - üí∏üí∏JOIN THE GROUPüí∏üí∏"
        }

        await callback_query.message.delete()
        await callback_query.message.answer(
            text.get(language, text["en"]),
            reply_markup=make_keyboard.get_inline_keyboard_markup_for_subscription(language))


@router.message(IsChatPrivate(), Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    await state.clear()
    text = {
        "ru": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Welcome! Please select your language:"
    }

    language = await user_repository.get_language_or_none(message.from_user.id)
    if language is None:
        language = message.from_user.language_code

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    await message.answer(
        text.get(language, text["en"]),
        reply_markup=make_keyboard.get_languages_inline_keyboard_markup()
    )
    await state.set_state(state_language)


@router.callback_query(StateFilter(state_language))
async def set_language(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query)
    language = callback_query.data

    await user_repository.set_or_update_language(callback_query.from_user.id, language)

    text = {
        "ru": "–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        "en": "The selected language has been successfully saved!"
    }

    await callback_query.message.edit_text(text[language])
    await state.clear()
    await handle_check_subscription(callback_query)